name: CI/CD Pipeline

# Trigger the workflow on any push to the 'main' branch or when a pull request targets it
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # First job: Build and Test
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner for the job

    steps:
      # Step 1: Checkout the repository to the runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Use Node.js version 18

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run tests to verify the application's integrity
      - name: Run tests
        run: npm test

  # Second job: Deployment (only after the 'build' job is successful)
  deploy:
    needs: build # Ensure this job runs only if the 'build' job is successful
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Deploy only on the main branch

    steps:
      # Step 1: Checkout the repository again for deployment
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Login to DockerHub using credentials stored in GitHub Secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # DockerHub username
          password: ${{ secrets.DOCKER_PASSWORD }} # DockerHub password or token

      # Step 3: Build and push the Docker image to DockerHub
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-devops-microservices:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/node-devops-microservices:latest

      # Step 4: Deploy to an EC2 instance using SSH
      - name: SSH and Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }} # Public IP address of your EC2 instance
          username: ${{ secrets.EC2_USER }} # SSH username (e.g., 'ubuntu' for default EC2 users)
          key: ${{ secrets.EC2_SSH_KEY }} # SSH private key for secure authentication
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/node-devops-microservices:latest
            docker stop node-app || true # Stop any running container named 'node-app'
            docker rm node-app || true # Remove the stopped container to avoid conflicts
            docker run -d --name node-app -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/node-devops-microservices:latest
